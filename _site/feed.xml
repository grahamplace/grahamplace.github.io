<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-02-11T20:55:14-08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Graham Place</title><subtitle>The personal website of Graham Place</subtitle><entry><title type="html">üîç Goggle ‚Ä¢ An autosuggest dictionary</title><link href="http://localhost:4000/goggle/" rel="alternate" type="text/html" title="üîç Goggle ‚Ä¢ An autosuggest dictionary" /><published>2018-02-10T21:32:00-08:00</published><updated>2018-02-10T21:32:00-08:00</updated><id>http://localhost:4000/goggle</id><content type="html" xml:base="http://localhost:4000/goggle/">&lt;p&gt;Goggle is an autosuggest dictionary app built with Flask, Javascript, and Bootstrap.&lt;/p&gt;

&lt;p&gt;You can see the source code &lt;a href=&quot;https://github.com/grahamplace/spelcheck&quot;&gt;here&lt;/a&gt;, and the live app &lt;a href=&quot;https://goggle.graham.place/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I was curious about autocomplete algorithms, so I needed a simple use case that required a suggestion algorithm.
Dictionaries are straightforward, and it‚Äôs handy to have a suggestion-backed search bar. (If I‚Äôm using a dictionary, it‚Äôs probably &lt;em&gt;because&lt;/em&gt; I don‚Äôt know how to spell a word!)&lt;/p&gt;

&lt;p&gt;Originally, the autosuggest algorithm was a &lt;a href=&quot;https://en.wikipedia.org/wiki/Trie&quot;&gt;trie search&lt;/a&gt; on a trie built from a &lt;a href=&quot;https://github.com/first20hours/google-10000-english&quot;&gt;list of the 10k most common english words&lt;/a&gt;. However, my trie search approach assumed prefix-correctness, that is, that the user input‚Äôs first few letters are what they intended ‚Äî and thus only words with a matching prefix could be suggested. (This is because the prefix is used to limit the total search space considered by the trie search).&lt;/p&gt;

&lt;p&gt;I found that the &lt;a href=&quot;https://norvig.com/spell-correct.html&quot;&gt;Peter Norvig approach&lt;/a&gt; returned better results, so I re-implemented the autosuggest backend with his approach. The basic idea is:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Parse your source corpus into a persisted data structure with O(1) lookup time. I just used a simple python dictionary.&lt;/li&gt;
  &lt;li&gt;Map each word from the corpus to some heuristic score. Since my corpus was a ranked list, I used the rank of each word. If your corpus was something more akin to a &lt;a href=&quot;https://norvig.com/big.txt&quot;&gt;book&lt;/a&gt;, you might instead pick the word‚Äôs total number of occurences in the corpus.&lt;/li&gt;
  &lt;li&gt;Given an input word, compute the finite set of mutations that are 1-2 &lt;a href=&quot;https://en.wikipedia.org/wiki/Levenshtein_distance&quot;&gt;Levenshtein distance&lt;/a&gt; away from the input word.&lt;/li&gt;
  &lt;li&gt;Check each of these mutations against your corpus data structure, and pick the mutation with the highest heuristic score. If you want many results, sort by the heuristic score and return the top &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; results.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When the user submits their input (or picks from the suggestions), the definitions are sourced from a request to the &lt;a href=&quot;https://dictionaryapi.com/&quot;&gt;Merriam Webster API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The app is hosted on &lt;a href=&quot;https://heroku.com&quot;&gt;Heroku&lt;/a&gt; and uses &lt;a href=&quot;https://www.cloudflare.com/cdn/&quot;&gt;Cloudflare&lt;/a&gt; as its CDN.&lt;/p&gt;

&lt;p&gt;Check out the example below or &lt;a href=&quot;https://goggle.graham.place/&quot;&gt;try it yourself&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/gifs/goggle.gif&quot; alt=&quot;goggle demo gif&quot; /&gt;&lt;/p&gt;</content><author><name>grahamplace</name></author><category term="project" /><category term="python" /><category term="algorithms" /><category term="data structures" /><summary type="html">Goggle is an autosuggest dictionary app built with Flask, Javascript, and Bootstrap.</summary></entry></feed>